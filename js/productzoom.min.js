! function(e, i, o, s) {
    "use strict";

    function t(e, i) {
        var o = this;
        o.element = e.wrap('<div class="glass-case"></div>').parent(), o.init(i)
    }
    var a = i.Modernizr;
    t.defaults = {
        widthDisplay: 700,
        heightDisplay: 500,
        isAutoScaleDisplay: !0,
        isAutoScaleHeight: !0,
        isDownloadEnabled: !0,
        downloadPosition: 3,
        isShowAlwaysIcons: !1,
        speedHideIcons: 3e3,
        mouseEnterDisplayCB: function() {},
        mouseLeaveDisplayCB: function() {},
        thumbsPosition: "bottom",
        nrThumbsPerRow: 5,
        isThumbsOneRow: !0,
        isOneThumbShown: !1,
        firstThumbSelected: 0,
        colorActiveThumb: -1,
        thumbsMargin: 4,
        isHoverShowThumbs: !1,
        zoomPosition: "right",
        autoInnerZoom: !0,
        isZoomEnabled: !0,
        isSlowZoom: !1,
        speedSlowZoom: 1200,
        isZoomDiffWH: !1,
        zoomWidth: 0,
        zoomHeight: 0,
        zoomAlignment: "displayImage",
        zoomMargin: 4,
        isSlowLens: !1,
        speedSlowLens: 600,
        isOverlayEnabled: !0,
        isOverlayFullImage: !1,
        speed: 400,
        easing: "linear",
        isKeypressEnabled: !0,
        colorIcons: -1,
        colorLoading: -1,
        textImageNotLoaded: "NO IMAGE",
        isZCapEnabled: !0,
        capZType: "in",
        capZPos: "bottom",
        capZAlign: "center"
    }, t.prototype = {
        init: function(o) {
            var c = this;
            c.config = e.extend(!0, {}, t.defaults, o), c._options = o, c._defaults = t.defaults, c.iOS = !1;
            var n = i.navigator.platform;
            ("iPad" === n || "iPhone" === n || "iPod" === n) && (c.iOS = !0), c.supportCanvas = a.canvas;
            var r = "<div class='gc-display-area'><div class='gc-icon gc-icon-download'></div><div class='gc-icon gc-icon-next'></div><div class='gc-icon gc-icon-prev'></div><div class='gc-display-container'><div class='gc-lens'></div><img class='gc-display-display' alt=' ' /></div></div>",
                g = "<div class='gc-zoom'><div class='gc-zoom-container'><img alt=' ' /></div></div>",
                l = "<div class='gc-overlay-area'><div class='gc-overlay-top-icons'><div class='gc-icon gc-icon-close'>&nbsp;</div><div class='gc-icon gc-icon-enlarge'>&nbsp;</div><div class='gc-icon gc-icon-compress'>&nbsp;</div></div><div class='gc-overlay-left-icons'><div class='gc-icon gc-icon-prev'>&nbsp;</div></div><div class='gc-overlay-right-icons'><div class='gc-icon gc-icon-next'>&nbsp;</div></div><div class='gc-overlay-gcontainer'><div class='gc-overlay-container'><div class='gc-overlay-container-display'><img class='gc-overlay-display' alt=' ' /></div></div></div></div>",
                h = "right" == c.config.thumbsPosition || "left" == c.config.thumbsPosition ? "-vt" : "",
                u = "<div class='gc-thumbs-area-prev'><div class='gc-icon gc-icon-prev" + h + "'></div></div><div class='gc-thumbs-area-next'><div class='gc-icon gc-icon-next" + h + "'></div></div>";
            if (c.widthDisplayPerc = 100, "top" == c.config.thumbsPosition || "left" == c.config.thumbsPosition ? c.element.append(r) : c.element.prepend(r), c.element.prepend(g).prepend(l), c.gcLoadingClass = 1 == a.csstransforms ? "gc-loading3" : "gc-loading", c.gcLoader = e("<div class='" + c.gcLoadingClass + "'></div>"), c.gcLoading = c.element.find("." + c.gcLoadingClass), -1 != c.config.colorLoading && 1 == a.csstransforms) {
                var m = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(c.config.colorLoading);
                if (m) {
                    var d = "rgba(" + parseInt(m[1], 16) + ", " + parseInt(m[2], 16) + ", " + parseInt(m[3], 16) + ", ";
                    c.gcLoader.css({
                        "border-top-color": d + "0.2)",
                        "border-right-color": d + "0.2)",
                        "border-bottom-color": d + "0.2)",
                        "border-left-color": d + "1)"
                    })
                }
            }
            c.gcImageData = [], c.gcDisplayArea = c.element.find(".gc-display-area"), c.gcDisplayContainer = c.gcDisplayArea.find(".gc-display-container"), c.gcDisplayDisplay = c.gcDisplayContainer.find(".gc-display-display"), c.gcLens = c.gcDisplayContainer.find(".gc-lens").hide(), c.gcDisplayDownload = c.gcDisplayArea.find(".gc-icon-download"), c.gcDisplayPrevious = c.gcDisplayArea.find(".gc-icon-prev"), c.gcDisplayNext = c.gcDisplayArea.find(".gc-icon-next"), c.gcZoom = c.element.find(".gc-zoom").hide(), c.gcZoomContainer = c.gcZoom.find(".gc-zoom-container"), c.gcZoomDisplay = c.gcZoomContainer.find("img"), c.gcOverlayArea = c.element.find(".gc-overlay-area").hide(), c.gcOverlayGContainer = c.gcOverlayArea.find(".gc-overlay-gcontainer"), c.gcOverlayContainer = c.gcOverlayArea.find(".gc-overlay-container"), c.gcOverlayContainerDisplay = c.gcOverlayContainer.find(".gc-overlay-container-display"), c.gcOverlayDisplay = c.gcOverlayContainer.find(".gc-overlay-display"), c.gcOverlayPrevious = c.gcOverlayArea.find(".gc-icon-prev"), c.gcOverlayNext = c.gcOverlayArea.find(".gc-icon-next"), c.gcOverlayClose = c.gcOverlayArea.find(".gc-icon-close"), c.gcOverlayEnlarge = c.gcOverlayArea.find(".gc-icon-enlarge").hide(), c.gcOverlayCompress = c.gcOverlayArea.find(".gc-icon-compress").hide(), c.gcThumbsUl = c.element.find("ul"), c.gcThumbsUl.wrap("<div class='gc-thumbs-area'></div>"), c.gcThumbsArea = c.element.find(".gc-thumbs-area"), c.gcThumbsArea.append(u), c.gcThumbsAreaPrevious = c.gcThumbsArea.find(".gc-thumbs-area-prev"), c.gcThumbsPrevious = c.gcThumbsAreaPrevious.find(".gc-icon-prev" + h), c.gcThumbsAreaNext = c.gcThumbsArea.find(".gc-thumbs-area-next"), c.gcThumbsNext = c.gcThumbsAreaNext.find(".gc-icon-next" + h), c.gcThumbsLi = c.gcThumbsUl.find("li"), c.gcThumbsLi.each(function(i) {
                for (var o = e.trim(e(this).find("img").attr("src")), s = c.gcThumbsLi.find('img[src="' + o + '"]'); s.length > 1;) s.last().parent().remove(), c.gcThumbsLi = c.gcThumbsUl.find("li"), s = c.gcThumbsLi.find('img[src="' + o + '"]')
            }), c.gcThumbsLi = c.gcThumbsUl.find("li"), c.gcThumbsImg = c.gcThumbsLi.find("img"), c.gcThumbsImg.wrap('<div class="gc-li-display-container"></div>'), c.gcThumbsLiDiv = c.gcThumbsLi.find(".gc-li-display-container"), c.gcThumbsUl.removeClass("gc-start"), c.gcTotalThumbsImg = c.gcThumbsImg.length;
            var p;
            if (c.config.isZCapEnabled === !0 && (c.gcCaption = e('<div class="gc-caption-container"><div></div></div>'), c.gcCaptionDisplay = c.gcCaption.find("div"), "inner" === c.config.zoomPosition && (c.config.capZType = "in"), p = "gc-caption-" + c.config.capZType + c.config.capZPos, -1 === e.inArray(p, ["gc-caption-outtop", "gc-caption-outbottom", "gc-caption-intop", "gc-caption-inbottom"]) && (p = "gc-caption-" + c._defaults.capZType + c._defaults.capZPos), p += -1 === e.inArray(c.config.capZAlign, ["left", "right", "center"]) ? " gc-alignment-" + c._defaults.capZAlign : " gc-alignment-" + c.config.capZAlign, c.gcCaption.addClass(p).appendTo(c.gcZoom)), c.isMouseEventsOn = !1, c.isTouchMove = !1, c.mouseTimer = 0, 1 != c.config.isShowAlwaysIcons && (c.gcDisplayDownload.hide(), c.gcDisplayPrevious.hide(), c.gcDisplayNext.hide()), c.isAutoInnerZooming = !1, "inner" == c.config.zoomPosition && (c.config.isZoomDiffWH = !0, c.config.zoomWidth = 0, c.config.zoomHeight = 0), "left" == c.config.thumbsPosition || "right" == c.config.thumbsPosition ? c.gcThumbsArea.addClass("gc-vt") : c.gcThumbsArea.addClass("gc-hz"), -1 != c.config.colorIcons && c.element.find(".gc-icon").css("color", c.config.colorIcons), 0 == c.config.isDownloadEnabled || 0 == c.supportCanvas) c.gcDisplayDownload.addClass("gc-hide");
            else {
                var f = {
                        top: "",
                        bottom: "",
                        right: "",
                        left: ""
                    },
                    v = "-" + c.gcDisplayArea.css("border-left-width");
                switch (c.config.downloadPosition) {
                    case 1:
                        f.top = v, f.left = v;
                        break;
                    case 2:
                        f.top = v, f.right = v;
                        break;
                    case 4:
                        f.bottom = v, f.right = v;
                        break;
                    default:
                        f.bottom = v, f.left = v
                }
                c.gcDisplayDownload.css(f)
            }
            0 == isNaN(c.config.firstThumbSelected) && parseFloat(c.config.firstThumbSelected) > -1 && parseFloat(c.config.firstThumbSelected) <= c.gcThumbsLi.length - 1 ? c.current = c.config.firstThumbSelected : c.current = c._defaults.firstThumbSelected, c.currentSlide = Math.floor(c.current / c.config.nrThumbsPerRow), c.old = 0, c.currentMousePos = {
                x: -1,
                y: -1
            }, c.resizeTimer = 0, c.zooming = !1, c.newZoom = {
                left: 0,
                top: 0
            }, c.currentZoom = {
                left: 0,
                top: 0
            }, c.slowZoomTimer = 0, c.newLens = {
                left: 0,
                top: 0
            }, c.currentLens = {
                left: 0,
                top: 0
            }, c.slowLensTimer = 0;
            var y = c.gcThumbsLi.eq(c.current).find("img").attr("alt");
            y === s && (y = "image"), c.gcDisplayDisplay.attr("src", c.gcThumbsImg.eq(c.current).attr("src")).attr("alt", y), c.setup(), e.when(c.preloadImages()).done(function() {
                c.update(), c.initEvents()
            })
        },
        preloadImages: function() {
            function o(e, i, o, s) {
                this.width = e, this.height = i, this.isLoaded = o
            }
            var s = this,
                t = 0,
                c = s.gcTotalThumbsImg;
            return e.Deferred(function(n) {
                s.gcThumbsImg.each(function(r) {
                    e("<img/>").on("load", function() {
                        var i = this.width,
                            a = this.height,
                            r = new o(i, a, !0),
                            g = s.gcThumbsLi.find("img[src*='" + e(this).attr("src") + "']").parents("li").index();
                        s.gcImageData[g] = r, s.processThumbImage(g), ++t === c && n.resolve()
                    }).on("error", function() {
                        var r = s.gcThumbsLi.find("img[src*='" + e(this).attr("src") + "']").parents("li").index(),
                            g = s.gcThumbsLi.width(),
                            l = s.gcThumbsLi.height(),
                            h = new o(g, l, !1);
                        if (s.gcImageData[r] = h, this.onerror = "", a.svg) {
                            var u = i.btoa("<svg xmlns='http://www.w3.org/2000/svg' width='" + g + "' height='" + l + "'><rect width='" + g + "' height='" + l + "' fill='#eee'/><text text-anchor='middle' x='" + g / 2 + "' y='" + l / 2 + "' style='fill:#aaa;font-weight:bold;font-size:8px;font-family:Arial,Helvetica,sans-serif;dominant-baseline:central'>" + s.config.textImageNotLoaded + "</text></svg>");
                            s.gcThumbsImg.eq(r).attr("src", "data:image/svg+xml;base64," + u)
                        }
                        s.processThumbImage(r), ++t === c && n.resolve()
                    }).attr("src", e(this).attr("src"))
                })
            }).promise()
        },
        processThumbImage: function(e) {
            var i = this;
            i.setupThumbImg(i.gcThumbsLi.eq(e), e), i.removeLoader(i.gcThumbsLi.eq(e)), i.gcThumbsLi.eq(e).find(".gc-li-display-container").removeClass("gc-hide"), i.current == e && (i.removeLoader(i.gcDisplayArea), i.gcDisplayContainer.removeClass("gc-hide"), i.setupDisplayDisplay(), i.setupLens())
        },
        setup: function() {
            var e, i = this;
            if (("right" == i.config.thumbsPosition || "left" == i.config.thumbsPosition) && 0 == i.config.isOneThumbShown && i.gcThumbsLi.length > 1) {
                var o = parseFloat(i.gcThumbsLi.css("margin-bottom")),
                    s = parseFloat(i.config.heightDisplay) / i.config.nrThumbsPerRow - (i.config.nrThumbsPerRow - 1) * o / i.config.nrThumbsPerRow,
                    t = i.config.widthDisplay / i.config.heightDisplay,
                    a = s * t,
                    c = a + i.config.thumbsMargin + parseFloat(i.config.widthDisplay);
                i.widthDisplayPerc = Math.round(100 * i.config.widthDisplay / c), e = i.element.parent().width() > c ? c : i.element.parent().width()
            } else e = i.element.parent().width() > i.config.widthDisplay ? i.config.widthDisplay : i.element.parent().width();
            if (i.element.css({
                    width: e
                }), i.setupDisplayArea(), 0 == i.config.isOneThumbShown && 1 == i.gcTotalThumbsImg ? (i.gcThumbsArea.outerHeight(0), i.gcThumbsArea.addClass("gc-hide"), i.config.isKeypressEnabled = !1) : (i.config.isOneThumbShown = !0, i.setupThumbs()), 1 == i.gcTotalThumbsImg ? (i.gcOverlayPrevious.addClass("gc-hide"), i.gcOverlayNext.addClass("gc-hide")) : (i.gcOverlayPrevious.css("margin-top", -(i.gcOverlayPrevious.outerHeight() / 2)), i.gcOverlayNext.css("margin-top", -(i.gcOverlayNext.outerHeight() / 2))), "top" == i.config.thumbsPosition || "bottom" == i.config.thumbsPosition) {
                var n = 0 == i.config.isOneThumbShown ? 0 : i.gcThumbsArea.outerHeight();
                i.element.css({
                    height: n + i.gcDisplayArea.outerHeight() + parseFloat(i.config.thumbsMargin)
                })
            } else {
                var r = 0 == i.config.isOneThumbShown ? 0 : i.gcThumbsArea.outerWidth();
                i.element.css({
                    width: r + i.gcDisplayArea.outerWidth() + parseFloat(i.config.thumbsMargin)
                }), i.element.css({
                    height: i.gcDisplayArea.outerHeight()
                })
            }
        },
        setupDisplayArea: function() {
            var e, i, o = this,
                s = o.config.widthDisplay,
                t = o.config.heightDisplay;
            o.gcDisplayArea.css({
                height: "0",
                width: "0"
            }), e = o.widthDisplayPerc * o.element.outerWidth() / 100, i = e * (t / s), o.gcDisplayArea.css({
                height: Math.ceil(i),
                width: Math.ceil(e)
            }), o.gcDisplayPrevious.css("margin-top", -(o.gcDisplayPrevious.outerHeight() / 2)), o.gcDisplayNext.css("margin-top", -(o.gcDisplayNext.outerHeight() / 2)), 1 == o.gcTotalThumbsImg && (o.gcDisplayPrevious.addClass("gc-hide"), o.gcDisplayNext.addClass("gc-hide")), o.gcDisplayContainer.addClass("gc-hide"), o.addLoader(o.gcDisplayArea)
        },
        setupDisplayDisplay: function() {
            var e = this;
            e.gcDisplayContainer.css({
                width: "0",
                height: "0"
            }), e.gcDisplayContainer.css({
                width: e.gcDisplayArea.outerWidth(),
                height: e.gcDisplayArea.outerHeight()
            });
            var i, o, s, t = e.gcDisplayContainer.outerWidth() / e.gcImageData[e.current].width,
                a = e.gcDisplayContainer.outerHeight() / e.gcImageData[e.current].height;
            1 > t || 1 > a ? (e.config.isZoomEnabled === !0 ? e.isMouseEventsOn = !0 : e.isMouseEventsOn = !1, i = a > t ? t : a, o = i * e.gcImageData[e.current].width, s = i * e.gcImageData[e.current].height) : (e.gcDisplayContainer.trigger("mouseleave.glasscase"), e.isMouseEventsOn = !1, o = e.gcImageData[e.current].width, s = e.gcImageData[e.current].height), e.gcDisplayDisplay.css({
                width: o,
                height: s
            }), e.gcDisplayContainer.css({
                width: o,
                height: s
            });
            var c = 2 * parseFloat(e.gcDisplayArea.css("border-left-width")),
                n = 2 * parseFloat(e.gcDisplayArea.css("padding-top")),
                r = e.gcDisplayContainer.outerWidth() / 2 * 100 / (e.gcDisplayArea.outerWidth() - c - n),
                g = e.gcDisplayContainer.outerHeight() / 2 * 100 / (e.gcDisplayArea.outerWidth() - c - n);
            e.gcDisplayContainer.css({
                "margin-left": "-" + r + "%",
                "margin-top": "-" + g + "%"
            })
        },
        setupZoom: function() {
            var o = this;
            o.gcZoomDisplay.attr("src", o.gcDisplayDisplay.attr("src")).attr("alt", o.gcDisplayDisplay.attr("alt")), "inner" != o.config.zoomPosition && (o.isAutoInnerZooming = !1, o.config = e.extend(!0, {}, o._defaults, o._options), o.gcZoom.appendTo(o.element).removeClass("gc-zoom-inner"));
            for (var t = 2 * parseFloat(o.gcZoom.css("border-left-width")), a = 2 * parseFloat(o.gcDisplayArea.css("padding-top")), c = "inner" == o.config.zoomPosition ? a : t + a, n = "inner" == o.config.zoomPosition ? a : t + a, r = 0; 2 > r && (c += o.config.isZoomDiffWH && o.config.zoomWidth > 0 ? parseFloat(o.config.zoomWidth) < o.gcImageData[o.current].width ? parseFloat(o.config.zoomWidth) : o.gcImageData[o.current].width : o.gcDisplayContainer.outerWidth(), n += o.config.isZoomDiffWH && o.config.zoomHeight > 0 ? parseFloat(o.config.zoomHeight) < o.gcImageData[o.current].height ? parseFloat(o.config.zoomHeight) : o.gcImageData[o.current].height : o.gcDisplayContainer.outerHeight(), 0 == o.config.isZoomDiffWH && (c = n), 1 == o.config.autoInnerZoom && "inner" != o.config.zoomPosition) && o.element.outerWidth() + c > e(i).width() && (o.isAutoInnerZooming = !0, o.config.isZoomDiffWH = !0, o.config.zoomWidth = 0, o.config.zoomHeight = 0, 0 == r && (c = n = a), "inner" != o.config.zoomPosition); r++);
            if (o.gcZoomContainer.css({
                    width: 0,
                    height: 0
                }), o.gcZoom.css({
                    width: c,
                    height: n
                }), o.gcZoomContainer.css({
                    width: o.gcZoom.outerWidth(),
                    height: o.gcZoom.outerHeight()
                }), o.config.isZCapEnabled === !0) {
                var g = e(o.gcThumbsImg[o.current]).data("gc-caption");
                g === s ? o.gcCaption.hide() : (o.gcCaption.show(), o.gcCaptionDisplay.empty().append(g));
                var l;
                o.isAutoInnerZooming === !0 ? "out" === o.config.capZType && (o.gcCaption.removeClass("gc-caption-outtop gc-caption-outbottom"), l = "top" === o.config.capZPos ? "gc-caption-intop" : "gc-caption-inbottom", o.gcCaption.addClass(l)) : "out" === o.config.capZType && (o.gcCaption.hasClass("gc-caption-intop") || o.gcCaption.hasClass("gc-caption-inbottom")) && (o.gcCaption.removeClass("gc-caption-intop gc-caption-inbottom"), l = "top" === o.config.capZPos ? "gc-caption-outtop" : "gc-caption-outbottom", o.gcCaption.addClass(l))
            }
        },
        setupZoomPos: function() {
            var e = this;
            if ("inner" == e.config.zoomPosition || 1 == e.isAutoInnerZooming) e.gcZoom.appendTo(e.gcDisplayContainer).addClass("gc-zoom-inner");
            else {
                e.gcZoom.appendTo(e.element).removeClass("gc-zoom-inner"), "left" == e.config.zoomPosition ? e.gcZoom.css({
                    right: e.element.outerWidth(!0),
                    "margin-right": e.config.zoomMargin + "px"
                }) : e.gcZoom.css({
                    left: e.element.outerWidth(!0),
                    "margin-left": e.config.zoomMargin + "px"
                });
                var i = "displayArea" == e.config.zoomAlignment ? 0 : e.gcDisplayContainer.position().top + parseFloat(e.gcDisplayContainer.css("margin-top")) - parseFloat(e.gcDisplayArea.css("padding-top"));
                if ("top" == e.config.thumbsPosition) {
                    var o = e.gcThumbsArea.outerHeight() + parseFloat(e.config.thumbsMargin);
                    e.gcZoom.css({
                        top: i + o
                    })
                } else e.gcZoom.css({
                    top: i
                })
            }
        },
        setupLens: function() {
            var e = this,
                i = Math.round(e.gcZoomContainer.outerWidth() / e.gcImageData[e.current].width * 100),
                o = Math.round(e.gcDisplayDisplay.outerWidth() * i / 100),
                s = Math.round(e.gcZoomContainer.outerHeight() / e.gcImageData[e.current].height * 100),
                t = Math.round(e.gcDisplayDisplay.outerHeight() * s / 100);
            e.gcLens.css({
                width: o,
                height: t
            }), e.mousemoveHandler()
        },
        addLoader: function(i) {
            var o = this;
            e(i).prepend(o.gcLoader.clone())
        },
        removeLoader: function(i) {
            var o = this,
                s = e(i).find("." + o.gcLoadingClass);
            s.length && s.remove()
        },
        setupThumbImg: function(i, o) {
            var s, t = this,
                a = t.gcThumbsLi.outerWidth(),
                c = t.gcThumbsLi.outerHeight(),
                n = (e(i), a / t.gcImageData[o].width),
                r = c / t.gcImageData[o].height;
            s = n > r ? n : r, t.gcThumbsImg[o].width = Math.ceil(t.gcImageData[o].width * s, 10), t.gcThumbsImg[o].height = Math.ceil(t.gcImageData[o].height * s, 10);
            var g = t.gcThumbsImg.eq(o).outerWidth() / 2 * 100 / t.gcThumbsLiDiv.outerWidth(),
                l = t.gcThumbsImg.eq(o).outerHeight() / 2 * 100 / t.gcThumbsLiDiv.outerWidth();
            t.gcThumbsImg.eq(o).css({
                "margin-top": "-" + l + "%",
                "margin-left": "-" + g + "%"
            }), t.gcThumbsLiDiv.eq(o).removeClass("gc-hide"), t.removeLoader(t.gcThumbsLi.eq(o)), t.gcThumbsLiDiv.eq(o).removeClass("gc-hide"), t.removeLoader(t.gcThumbsLi.eq(o))
        },
        setupThumbs: function() {
            var e = this;
            "right" == e.config.thumbsPosition && (e.setupThumbsLR(), e.gcDisplayArea.css({
                top: "0",
                left: "0"
            }), e.gcThumbsArea.css({
                top: "0",
                left: e.gcDisplayArea.outerWidth() + parseFloat(e.config.thumbsMargin)
            })), "left" == e.config.thumbsPosition && (e.setupThumbsLR(), e.gcThumbsArea.css({
                top: "0",
                left: "0"
            }), e.gcDisplayArea.css({
                top: "0",
                left: e.gcThumbsArea.outerWidth() + parseFloat(e.config.thumbsMargin)
            })), "bottom" == e.config.thumbsPosition && (e.setupThumbsTB(), e.gcDisplayArea.css({
                top: "0",
                left: "0"
            }), e.gcThumbsArea.css({
                top: e.gcDisplayArea.outerHeight() + parseFloat(e.config.thumbsMargin),
                left: "0"
            })), "top" == e.config.thumbsPosition && (e.setupThumbsTB(), e.gcThumbsArea.css({
                top: "0",
                left: "0"
            }), e.gcDisplayArea.css({
                top: e.gcThumbsArea.outerHeight() + parseFloat(e.config.thumbsMargin),
                left: "0"
            }))
        },
        setupThumbsTB: function() {
            var e = this;
            e.gcThumbsArea.css("width", e.gcDisplayArea.outerWidth());
            var i, o = parseFloat(e.gcThumbsLi.css("margin-right")),
                s = e.config.widthDisplay / e.config.heightDisplay,
                t = e.gcThumbsArea.outerWidth() / e.config.nrThumbsPerRow - (e.config.nrThumbsPerRow - 1) * o / e.config.nrThumbsPerRow,
                a = t / s;
            i = 1 == e.config.isThumbsOneRow ? 100 * t / ((t + o) * e.gcThumbsLi.length - o) : 100 * t / e.gcThumbsArea.outerWidth(), e.gcThumbsLi.css({
                width: i + "%",
                height: a
            }), e.gcThumbsLiDiv.addClass("gc-hide");
            for (var c = 0; c < e.gcThumbsLi.length; c++) e.addLoader(e.gcThumbsLi[c]);
            if (1 == e.config.isThumbsOneRow ? e.gcThumbsLi.last().css("margin-right", 0) : (e.gcThumbsUl.find(":nth-child(" + e.config.nrThumbsPerRow + "n)").css("margin-right", 0), e.gcThumbsUl.find(":nth-child(n +" + (parseFloat(e.config.nrThumbsPerRow) + 1) + ")").css("margin-top", o + "px")), 1 == e.config.isThumbsOneRow) e.gcThumbsUl.css({
                width: Math.ceil(t * e.gcThumbsLi.length + (e.gcThumbsLi.length - 1) * o),
                height: Math.ceil(a)
            }), e.gcThumbsArea.css("height", Math.ceil(a));
            else {
                var n = Math.ceil(e.gcThumbsLi.length / e.config.nrThumbsPerRow),
                    r = Math.ceil(a * n + o * (n - 1));
                e.gcThumbsUl.css({
                    width: e.gcThumbsArea.outerWidth(),
                    height: r
                }), e.gcThumbsArea.css("height", r)
            }
            if (1 == e.config.isThumbsOneRow ? (e.gcThumbsAreaPrevious.removeClass("gc-hide"), e.gcThumbsPrevious.css("margin-top", -e.gcThumbsPrevious.outerHeight() / 2), e.gcThumbsAreaNext.removeClass("gc-hide"), e.gcThumbsNext.css("margin-top", -e.gcThumbsNext.outerHeight() / 2), e.setupSlider()) : (e.gcThumbsAreaPrevious.addClass("gc-hide"), e.gcThumbsAreaNext.addClass("gc-hide")), e.iOS) {
                var g = e.gcThumbsLi.outerWidth(),
                    l = e.gcThumbsArea.outerWidth() - (g * e.config.nrThumbsPerRow + (e.config.nrThumbsPerRow - 1) * o);
                e.gcThumbsUl.find(":nth-child(" + e.config.nrThumbsPerRow + "n)").css("width", g + l)
            }
        },
        setupThumbsLR: function() {
            var e = this;
            e.gcThumbsArea.css("height", e.gcDisplayArea.outerHeight());
            var i, o = parseFloat(e.gcThumbsLi.css("margin-bottom")),
                s = e.config.widthDisplay / e.config.heightDisplay,
                t = e.gcThumbsArea.outerHeight() / e.config.nrThumbsPerRow - (e.config.nrThumbsPerRow - 1) * o / e.config.nrThumbsPerRow,
                a = t * s;
            i = 100 * t / ((t + o) * e.gcThumbsLi.length - o), e.gcThumbsLi.css({
                width: a,
                height: i + "%"
            }), e.gcThumbsLiDiv.addClass("gc-hide");
            for (var c = 0; c < e.gcThumbsLi.length; c++) e.addLoader(e.gcThumbsLi[c]);
            if (e.gcThumbsLi.last().css("margin-bottom", 0), e.gcThumbsUl.css({
                    width: Math.ceil(a),
                    height: Math.ceil((t + o) * e.gcThumbsLi.length - o)
                }), e.gcThumbsArea.css("width", Math.ceil(a)), e.gcThumbsAreaPrevious.removeClass("gc-hide"), e.gcThumbsPrevious.css("margin-left", -e.gcThumbsPrevious.outerWidth() / 2), e.gcThumbsAreaNext.removeClass("gc-hide"), e.gcThumbsNext.css("margin-left", -e.gcThumbsNext.outerWidth() / 2), e.setupSlider(), e.iOS) {
                var n = e.gcThumbsLi.outerHeight(),
                    r = e.gcThumbsArea.outerHeight() - (n * e.config.nrThumbsPerRow + (e.config.nrThumbsPerRow - 1) * o);
                e.gcThumbsUl.find(":nth-child(" + e.config.nrThumbsPerRow + "n)").css("height", n + r)
            }
        },
        setupSlider: function() {
            var e = this;
            return e.gcTotalThumbsImg <= e.config.nrThumbsPerRow ? (e.gcThumbsAreaPrevious.addClass("gc-hide"), void e.gcThumbsAreaNext.addClass("gc-hide")) : (e.gcThumbsAreaPrevious.removeClass("gc-disabled"), e.gcThumbsAreaNext.removeClass("gc-disabled"), 0 == e.currentSlide && e.gcThumbsAreaPrevious.addClass("gc-disabled"), void(e.currentSlide == Math.floor((e.gcThumbsLi.length - 1) / e.config.nrThumbsPerRow) && e.gcThumbsAreaNext.addClass("gc-disabled")))
        },
        update: function() {
            var e, i = this; - 1 != i.config.colorActiveThumb && i.element.find(".gc-active").css("border-color", ""), i.gcThumbsLi.removeClass("gc-active").eq(i.current).addClass("gc-active"), -1 != i.config.colorActiveThumb && i.element.find(".gc-active").css("border-color", i.config.colorActiveThumb), e = i.gcThumbsLi.eq(i.current).find("img").attr("alt"), e === s && (e = "image"), i.gcDisplayDisplay.attr("src", i.gcThumbsLi.eq(i.current).find("img").attr("src")).attr("alt", e), i.setupDisplayDisplay(), i.setupZoom(), i.setupLens(), i.setupZoomPos()
        },
        animateImage: function() {
            var i = this;
            i.gcDisplayDisplay.stop(!0).animate({
                opacity: .5
            }, 200, function() {
                e("body").hasClass("gc-noscroll") && i.gcOverlayDisplay.animate({
                    opacity: 0
                }, 200, function() {
                    i.update(), i.setupOverlay(), i.gcOverlayDisplay.animate({
                        opacity: 1
                    }, 500)
                }), e("body").hasClass("gc-noscroll") || i.update(), i.gcDisplayDisplay.animate({
                    opacity: 1
                }, 500, function() {
                    i.gcZoomDisplay.attr("src", i.gcDisplayDisplay.attr("src")).attr("alt", i.gcDisplayDisplay.attr("alt"))
                })
            })
        },
        nextImage: function() {
            var e = this;
            e.old = e.current, e.current = e.current == e.gcThumbsLi.length - 1 ? 0 : e.current + 1, e.slide("true", ""), e.animateImage()
        },
        previousImage: function() {
            var e = this;
            e.old = e.current, e.current = 0 == e.current ? e.gcThumbsLi.length - 1 : e.current - 1, e.slide("true", ""), e.animateImage()
        },
        slide: function(i, o) {
            var s = this;
            if (0 != s.config.isThumbsOneRow || "bottom" != s.config.thumbsPosition && "top" != s.config.thumbsPosition) {
                var t = 0;
                if ("true" == i ? t = Math.floor(s.current / s.config.nrThumbsPerRow) : "previous" == o ? (t = 0, s.currentSlide > 0 && (t = s.currentSlide - 1)) : (t = Math.floor((s.gcThumbsLi.length - 1) / s.config.nrThumbsPerRow), s.currentSlide < t && (t = s.currentSlide + 1)), t != s.currentSlide) {
                    s.currentSlide = t;
                    var a;
                    "bottom" == s.config.thumbsPosition || "top" == s.config.thumbsPosition ? (a = s.gcThumbsArea.outerWidth() + parseFloat(s.gcThumbsLi.css("margin-right")), s.gcThumbsUl.animate({
                        left: -(t * a) + "px"
                    }, s.config.speed)) : (a = s.gcThumbsArea.outerHeight() + parseFloat(s.gcThumbsLi.css("margin-bottom")), s.gcThumbsUl.animate({
                        top: -(t * a) + "px"
                    }, s.config.speed));
                    var c = e.proxy(function() {
                        this.isAnimating = !1, this.setupSlider()
                    }, s);
                    c.call()
                }
            }
        },
        mousemoveHandler: function(e) {
            var i = this;
            if (e !== s)
                if (1 == i.isTouchMove) {
                    if (1 == e.originalEvent.touches.length) {
                        var o = e.originalEvent.touches[0];
                        i.currentMousePos.x = o.pageX, i.currentMousePos.y = o.pageY
                    }
                } else i.currentMousePos.x = e.pageX, i.currentMousePos.y = e.pageY;
            (-1 != i.currentMousePos.x || -1 != i.currentMousePos.y) && (i.calcMousePos(i.currentMousePos), (0 == i.config.isSlowZoom || 1 == i.config.isSlowZoom && e == s) && i.gcZoomDisplay.css({
                top: i.newZoom.top,
                left: i.newZoom.left
            }), (0 == i.config.isSlowLens || 1 == i.config.isSlowLens && e == s) && i.gcLens.css({
                top: i.newLens.top,
                left: i.newLens.left
            }))
        },
        mouseenterHandler: function(e, i) {
            var o = this;
            if (o.isMouseEventsOn !== !1) {
                if (i !== s && (e = i), e !== s)
                    if (o.isTouchMove === !0) {
                        if (1 == e.originalEvent.touches.length) {
                            var t = e.originalEvent.touches[0];
                            o.currentMousePos.x = t.pageX, o.currentMousePos.y = t.pageY
                        }
                    } else o.currentMousePos.x = e.pageX, o.currentMousePos.y = e.pageY;
                o.calcMousePos(o.currentMousePos), o.currentZoom.top = o.newZoom.top, o.currentZoom.left = o.newZoom.left, o.currentLens.top = o.newLens.top, o.currentLens.left = o.newLens.left, o.gcZoomDisplay.css({
                    top: o.newZoom.top,
                    left: o.newZoom.left
                }), o.gcLens.css({
                    top: o.newLens.top,
                    left: o.newLens.left
                }), 0 == o.zooming && ("inner" == o.config.zoomPosition || 1 == o.isAutoInnerZooming ? o.gcZoom.fadeIn(o.config.speed) : (o.gcLens.fadeIn(o.config.speed), o.gcZoom.fadeIn(o.config.speed))), 1 == o.config.isSlowZoom && (clearTimeout(o.slowZoomTimer), o.zoomSlowDown()), 1 == o.config.isSlowLens && (clearTimeout(o.slowLensTimer), o.lensSlowDown()), o.zooming = !0
            }
        },
        mouseleaveHandler: function(e) {
            var i = this;
            if (i.gcLens.stop().hide(), i.gcZoom.stop().fadeOut(i.config.speed), e !== s)
                if (1 == i.isTouchMove) {
                    if (1 == e.originalEvent.touches.length) {
                        var o = e.originalEvent.touches[0];
                        i.currentMousePos.x = o.pageX, i.currentMousePos.y = o.pageY
                    }
                } else i.currentMousePos.x = e.pageX, i.currentMousePos.y = e.pageY;
            1 == i.config.isSlowZoom && clearTimeout(i.slowZoomTimer), 1 == i.config.isSlowLens && clearTimeout(i.slowLensTimer), i.zooming = !1
        },
        touchstartDC: function(e) {
            e.preventDefault()
        },
        touchmoveDC: function(e) {
            var i = this;
            0 == i.isTouchMove && (i.isTouchMove = !0, i.gcDisplayContainer.trigger("mouseenter.glasscase", e)), i.mousemoveHandler(e), e.preventDefault()
        },
        touchendDC: function(e) {
            var i = this;
            1 == i.isTouchMove ? (i.mouseleaveHandler(e), i.isTouchMove = !1) : i.toggleOverlay(), e.preventDefault()
        },
        calcMousePos: function(e) {
            var i = this,
                o = i.gcDisplayContainer.offset(),
                s = i.currentMousePos.x - o.left,
                t = i.currentMousePos.y - o.top,
                a = i.gcDisplayDisplay.outerWidth(),
                c = i.gcDisplayDisplay.outerHeight(),
                n = i.gcLens.outerWidth(),
                r = i.gcLens.outerHeight(),
                g = t - Math.round(r / 2),
                l = s - Math.round(n / 2),
                h = i.gcImageData[i.current].width / a,
                u = -g * h,
                m = -l * h;
            0 > t - r / 2 && (g = 0, u = 0), t + r / 2 > 0 + c && (g = c - r, u = -(i.gcImageData[i.current].height - i.gcZoom.outerHeight())), 0 > s - n / 2 && (l = 0, m = 0), s + n / 2 > 0 + a && (l = a - n, m = -(i.gcImageData[i.current].width - i.gcZoom.outerWidth())), i.newZoom.left = m, i.newZoom.top = u, i.newLens.left = l, i.newLens.top = g
        },
        zoomSlowDown: function() {
            var e = this,
                i = {
                    left: 0,
                    top: 0
                },
                o = {
                    left: 0,
                    top: 0
                };
            i.left = e.newZoom.left - e.currentZoom.left, i.top = e.newZoom.top - e.currentZoom.top, o.left = -i.left / (e.config.speedSlowZoom / 100), o.top = -i.top / (e.config.speedSlowZoom / 100), e.currentZoom.left = e.currentZoom.left - o.left, e.currentZoom.top = e.currentZoom.top - o.top, i.left < 1 && i.left > -1 && (e.currentZoom.left = e.newZoom.left), i.top < 1 && i.top > -1 && (e.currentZoom.top = e.newZoom.top), e.gcZoomDisplay.css({
                top: e.currentZoom.top,
                left: e.currentZoom.left
            }), e.slowZoomTimer = setTimeout(function() {
                e.zoomSlowDown()
            }, 25)
        },
        lensSlowDown: function() {
            var e = this,
                i = {
                    left: 0,
                    top: 0
                },
                o = {
                    left: 0,
                    top: 0
                };
            i.left = e.newLens.left - e.currentLens.left, i.top = e.newLens.top - e.currentLens.top, o.left = -i.left / (e.config.speedSlowLens / 100), o.top = -i.top / (e.config.speedSlowLens / 100), e.currentLens.left = e.currentLens.left - o.left, e.currentLens.top = e.currentLens.top - o.top, i.left < 1 && i.left > -1 && (e.currentLens.left = e.newLens.left), i.top < 1 && i.top > -1 && (e.currentLens.top = e.newLens.top), e.gcLens.css("top", e.currentLens.top), e.gcLens.css("left", e.currentLens.left), e.slowLensTimer = setTimeout(function() {
                e.lensSlowDown()
            }, 25)
        },
        setupOverlay: function() {
            var e = this,
                i = e.gcImageData[e.current].width <= e.gcOverlayArea.outerWidth() && e.gcImageData[e.current].height <= e.gcOverlayArea.outerHeight();
            e.gcOverlayDisplay.attr("src", e.gcDisplayDisplay.attr("src")).attr("alt", e.gcDisplayDisplay.attr("alt")), i || 1 == e.config.isOverlayFullImage ? (e.gcOverlayCompress.hide(), e.gcOverlayEnlarge.hide(), e.overlayNatSizes()) : (e.gcOverlayCompress.hide(), e.gcOverlayEnlarge.show(), e.gcOverlayArea.removeClass("gc-natsize"), e.overlayFitSizes())
        },
        overlayNatSizes: function() {
            var e = this,
                i = e.gcOverlayContainer.outerHeight(),
                o = e.gcOverlayContainer.outerWidth();
            e.gcOverlayGContainer.removeClass("gc-overlay-fit"), e.gcOverlayDisplay.removeClass("gc-overlay-display-center gc-overlay-display-hcenter gc-overlay-display-vcenter"), e.gcImageData[e.current].height <= i && e.gcImageData[e.current].width <= o ? e.gcOverlayDisplay.addClass("gc-overlay-display-center") : (e.gcImageData[e.current].height <= i && e.gcOverlayDisplay.addClass("gc-overlay-display-vcenter"), e.gcImageData[e.current].width <= o && e.gcOverlayDisplay.addClass("gc-overlay-display-hcenter"))
        },
        overlayFitSizes: function() {
            var e = this;
            e.gcOverlayGContainer.addClass("gc-overlay-fit"), e.gcOverlayDisplay.removeClass("gc-overlay-display-hcenter gc-overlay-display-vcenter").addClass("gc-overlay-display-center")
        },
        toggleOverlayImgSize: function() {
            var e = this;
            e.gcOverlayArea.hasClass("gc-natsize") ? (e.gcOverlayEnlarge.show(), e.gcOverlayCompress.hide(), e.gcOverlayArea.removeClass("gc-natsize"), e.overlayFitSizes()) : (e.gcOverlayArea.addClass("gc-natsize"), e.gcOverlayEnlarge.hide(), e.gcOverlayCompress.show(), e.overlayNatSizes())
        },
        toggleOverlay: function() {
            var i = this;
            if (e("body").hasClass("gc-noscroll")) i.fadeOutOverlay();
            else {
                if (0 == i.config.isOverlayEnabled) return;
                i.gcOverlayArea.fadeIn(i.config.speed), e("body").addClass("gc-noscroll"), i.setupOverlay()
            }
        },
        fadeOutOverlay: function() {
            var i = this;
            e("body").removeClass("gc-noscroll"), i.gcOverlayArea.fadeOut(i.config.speed)
        },
        resizeGC: function() {
            var e = this;
            e.element.css({
                height: "0",
                width: "0"
            }), e.setup(), e.gcThumbsImg.each(function(i) {
                e.setupThumbImg(e.gcThumbsLi.eq(i), i), e.removeLoader(e.gcThumbsLi.eq(i)), e.gcThumbsLi.eq(i).find(".gc-li-display-container").removeClass("gc-hide"), e.current == i && (e.removeLoader(e.gcDisplayArea), e.gcDisplayContainer.removeClass("gc-hide"), e.setupDisplayDisplay(), e.setupLens())
            }), e.update(), e.config.isOverlayFullImage || e.setupOverlay()
        },
        showDAIcons: function() {
            var e = this;
            e.gcTotalThumbsImg > 1 && (e.gcDisplayPrevious.show(), e.gcDisplayNext.show()), 1 == e.config.isDownloadEnabled && e.gcDisplayDownload.show()
        },
        hideDAIcons: function() {
            var e = this;
            e.gcTotalThumbsImg > 1 && (e.gcDisplayPrevious.hide(), e.gcDisplayNext.hide()), 1 == e.config.isDownloadEnabled && e.gcDisplayDownload.hide()
        },
        changeThumbs: function(e) {
            var i = this;
            i.current != e && (i.old = i.current, i.current = e, i.animateImage())
        },
        initEvents: function() {
            var s = this;
            s.config.isZoomEnabled === !0 && (s.isMouseEventsOn = !0, s.gcDisplayContainer.on("mousemove.glasscase", e.proxy(s.mousemoveHandler, s)).on("mouseenter.glasscase", e.proxy(s.mouseenterHandler, s)).on("mouseenter.glasscase", e.proxy(s.config.mouseEnterDisplayCB, s)).on("mouseleave.glasscase", e.proxy(s.mouseleaveHandler, s)).on("mouseleave.glasscase", e.proxy(s.config.mouseLeaveDisplayCB, s))), 1 != s.config.isShowAlwaysIcons && s.gcDisplayArea.on("mouseenter.glasscaseDA", e.proxy(s.showDAIcons, s)).on("mouseleave.glasscaseDA", e.proxy(s.hideDAIcons, s)).on("mousemove.glasscaseDA", function(e) {
                s.showDAIcons(), clearTimeout(s.mouseTimer), s.mouseTimer = setTimeout(function() {
                    s.hideDAIcons()
                }, s.config.speedHideIcons)
            }), s.gcDisplayContainer.on("click.glasscase", function(e) {
                s.toggleOverlay()
            }), s.gcDisplayDownload.on("click.glasscase", function(e) {
                var i = o.createElement("canvas");
                i.width = s.gcImageData[s.current].width, i.height = s.gcImageData[s.current].height;
                var t = i.getContext("2d");
                t.drawImage(s.gcDisplayDisplay[0], 0, 0);
                new Blob;
                i.toBlob(function(e) {
                    saveAs(e, s.gcDisplayDisplay.attr("src").replace(/^.*[\\\/]/, ""))
                }, "image/png")
            }), s.gcDisplayPrevious.on("click.glasscase", function(e) {
                s.previousImage()
            }), s.gcDisplayNext.on("click.glasscase", function(e) {
                s.nextImage()
            }), s.gcOverlayPrevious.on("click.glasscase", function(e) {
                s.previousImage()
            }), s.gcOverlayNext.on("click.glasscase", function(e) {
                s.nextImage()
            }), s.gcOverlayClose.on("click.glasscase", function(e) {
                s.toggleOverlay()
            }), s.gcOverlayContainer.on("click.glasscase", function(e) {
                s.toggleOverlay()
            }), s.gcOverlayDisplay.on("mouseenter.glasscase", function(e) {
                s.gcOverlayContainer.off("click.glasscase")
            }), s.gcOverlayDisplay.on("mouseleave.glasscase", function(e) {
                s.gcOverlayContainer.on("click.glasscase", function(e) {
                    s.toggleOverlay()
                })
            }), s.config.isOverlayFullImage || (s.gcOverlayDisplay.on("dblclick.glasscase", function(e) {
                s.toggleOverlayImgSize()
            }), s.gcOverlayEnlarge.on("click.glasscase", function(e) {
                s.toggleOverlayImgSize()
            }), s.gcOverlayCompress.on("click.glasscase", function(e) {
                s.toggleOverlayImgSize()
            })), e(o).on("keydown", function(e) {
                1 == s.config.isKeypressEnabled && (37 == e.keyCode && s.previousImage(), 39 == e.keyCode && s.nextImage()), 27 == e.keyCode && s.fadeOutOverlay()
            }), e(i).resize(function() {
                clearTimeout(s.resizeTimer), s.resizeTimer = setTimeout(function() {
                    s.resizeGC()
                }, 100)
            }), s.gcThumbsLi.on("click.glasscase", function(i) {
                var o = e(this).index();
                s.changeThumbs(o)
            }), 1 == s.config.isHoverShowThumbs && s.gcThumbsLi.on("mouseenter", function(i) {
                var o = e(this).index();
                s.changeThumbs(o)
            }), s.gcThumbsAreaPrevious.on("click.glasscase", function(e) {
                s.slide("false", "previous")
            }), s.gcThumbsAreaNext.on("click.glasscase", function(e) {
                s.slide("false", "next")
            })
        }
    }, e.fn.glassCase = function(i) {
        this.each(function() {
            var o = e.data(this, "gcglasscase");
            o || e.data(this, "gcglasscase", new t(e(this), i));
        })
    }
}(jQuery, window, document);